}
return vals;
}
};
')
grid.export("qplotbrowser.svg", exportCoords = "inline", exportJS = "inline")
grid.export("qplotbrowser.svg")
grid.export("qplotbrowser.svg", exportCoords = "inline", exportJS = "inline")
rid.script(filename="tooltip.js")
grid.script(filename="tooltip.js")
grid.export("qplotbrowser.svg", exportCoords = "inline", exportJS = "inline")
grid.script(filename="tooltip.js")
grid.export("qplotbrowser.svg", exportCoords = "inline", exportJS = "inline")
grid.export("qplotbrowser.svg")
grid.script(filename="tooltip.js")
grid.export("qplotbrowser.svg")
grid.script("var showTooltip = function(evt, label) {
// Getting rid of any existing tooltips
hideTooltip();
var svgNS = "http://www.w3.org/2000/svg";
var target = evt.currentTarget;
// Create new text node, rect and text for the tooltip
var content = document.createTextNode(label);
var text = document.createElementNS(svgNS, "text");
text.setAttribute("id", "tooltipText");
// Resetting some style attributes
text.setAttribute("font-size", "16px");
text.setAttribute("fill", "black");
text.setAttribute("stroke-width", "0");
text.appendChild(content);
var rect = document.createElementNS(svgNS, "rect");
rect.setAttribute("id", "tooltipRect");
// Add rect and text to the bottom of the document.
// This is because SVG has a rendering order.
// We want the tooltip to be on top, therefore inserting last.
var wrappingGroup = document.getElementsByTagName("g")[0];
wrappingGroup.appendChild(rect);
wrappingGroup.appendChild(text);
// Transforming the mouse location to the SVG coordinate system
// Snippet lifted from: http://tech.groups.yahoo.com/group/svg-developers/message/52701
var m = target.getScreenCTM();
var p = document.documentElement.createSVGPoint();
p.x = evt.clientX;
p.y = evt.clientY;
p = p.matrixTransform(m.inverse());
// Determine position for tooltip based on location of
// element that mouse is over
// AND size of text label
// Currently the tooltip is offset by (3, 3)
var tooltipx = p.x + 3;
var tooltiplabx = tooltipx + 5;
var tooltipy = p.y + 3;
var tooltiplaby = tooltipy + 5;
// Position tooltip rect and text
text.setAttribute("transform",
"translate(" + tooltiplabx + ", " + tooltiplaby + ") " +
"scale(1, -1)");
rect.setAttribute("x", tooltipx);
rect.setAttribute("y", tooltipy);
rect.setAttribute("width", text.getBBox().width + 10);
rect.setAttribute("height", text.getBBox().height + 5);
rect.setAttribute("stroke", "black");
rect.setAttribute("fill", "yellow");
};
var hideTooltip = function() {
// Remove tooltip text and rect
var text = document.getElementById("tooltipText");
var rect = document.getElementById("tooltipRect");
if (text && rect) {
text.parentNode.removeChild(text);
rect.parentNode.removeChild(rect);
}
};
")
grid.script('var showTooltip = function(evt, label) {
// Getting rid of any existing tooltips
hideTooltip();
var svgNS = "http://www.w3.org/2000/svg";
var target = evt.currentTarget;
// Create new text node, rect and text for the tooltip
var content = document.createTextNode(label);
var text = document.createElementNS(svgNS, "text");
text.setAttribute("id", "tooltipText");
// Resetting some style attributes
text.setAttribute("font-size", "16px");
text.setAttribute("fill", "black");
text.setAttribute("stroke-width", "0");
text.appendChild(content);
var rect = document.createElementNS(svgNS, "rect");
rect.setAttribute("id", "tooltipRect");
// Add rect and text to the bottom of the document.
// This is because SVG has a rendering order.
// We want the tooltip to be on top, therefore inserting last.
var wrappingGroup = document.getElementsByTagName("g")[0];
wrappingGroup.appendChild(rect);
wrappingGroup.appendChild(text);
// Transforming the mouse location to the SVG coordinate system
// Snippet lifted from: http://tech.groups.yahoo.com/group/svg-developers/message/52701
var m = target.getScreenCTM();
var p = document.documentElement.createSVGPoint();
p.x = evt.clientX;
p.y = evt.clientY;
p = p.matrixTransform(m.inverse());
// Determine position for tooltip based on location of
// element that mouse is over
// AND size of text label
// Currently the tooltip is offset by (3, 3)
var tooltipx = p.x + 3;
var tooltiplabx = tooltipx + 5;
var tooltipy = p.y + 3;
var tooltiplaby = tooltipy + 5;
// Position tooltip rect and text
text.setAttribute("transform",
"translate(" + tooltiplabx + ", " + tooltiplaby + ") " +
"scale(1, -1)");
rect.setAttribute("x", tooltipx);
rect.setAttribute("y", tooltipy);
rect.setAttribute("width", text.getBBox().width + 10);
rect.setAttribute("height", text.getBBox().height + 5);
rect.setAttribute("stroke", "black");
rect.setAttribute("fill", "yellow");
};
var hideTooltip = function() {
// Remove tooltip text and rect
var text = document.getElementById("tooltipText");
var rect = document.getElementById("tooltipRect");
if (text && rect) {
text.parentNode.removeChild(text);
rect.parentNode.removeChild(rect);
}
};
')
grid.export("qplotbrowser.svg")
grid.export("qplotbrowser.svg", exportJS = "inline")
grid.export("qplotbrowser.svg", exportJS = "inline")
grid.script("")
grid.export("qplotbrowser.svg", exportJS = "inline")
names <- grobs$name[ startsWith(grob$name,"geom_point")==T]
startsWith
names <- grobs$name[ startsWith(grob$name,"geom_point")]
names <- grobs$name[ startsWith(grob$name,"geom_point") ]
startsWith(grob$name,"geom_point")
grob$name
grobs$name
names <- grobs$name[ startsWith(grobs$name,"geom_point") ]
names
for (i in unique(names)) {      grid.garnish(i,                   onmouseover=paste("showTooltip(evt, ' ", i, " ' )"),                   onmouseout="hideTooltip()")  }
grid.export("qplotbrowser.svg")
grid.newpage()
library("ggplot2")
library("gstats")
library("gstat")
library("gstats")
library("gdata")
qplot(disp, mpg, data=mtcars) + facet_wrap(~ cyl)
names <- grobs$name[ startsWith(grob$name,"geom_point")==T]
grobs = grid.ls()
names <- grobs$name[ startsWith(grob$name,"geom_point")==T]
grobs = grid.ls()
names <- grobs$name[ startsWith(grob$name,"geom_point")==T]
names <- grobs$name[ startsWith(grobs$name,"geom_point")==T]
for (i in unique(names)) {grid.garnish(i,onmouseover=paste("showTooltip(evt, ' ", i, " ' )"),onmouseout="hideTooltip()")}
grid.script(filename="tooltip.js")
grid.export("qplotbrowser.svg")
grid.newpage()
library("ggplot2")
library("gdata")
qplot(disp, mpg, data=mtcars) + facet_wrap(~ cyl)
grobs = grid.ls()
names <- grobs$name[ startsWith(grobs$name,"geom_point")==T]
for (i in unique(names)) {grid.garnish(i,onmouseover=paste("showTooltip(evt, ' ", i, " ' )"),onmouseout="hideTooltip()")}
grid.script(filename="tooltip.js")
grid.export("qplotbrowser.svg")
grid.newpage()
library("ggplot2")
library("gdata")
qplot(disp, mpg, data=mtcars) + facet_wrap(~ cyl)
grobs = grid.ls()
names <- grobs$name[ startsWith(grobs$name,"geom_point")==T]
for (i in unique(names)) {grid.garnish(i,onmouseover=paste("showTooltip(evt, ' ", i, " ' )"),onmouseout="hideTooltip()")}
grid.script(filename="tooltip.js")
grid.export("qplotbrowser.svg")
grid.newpage()
library("ggplot2")
library("gdata")
qplot(disp, mpg, data=mtcars) + facet_wrap(~ cyl)
grobs = grid.ls()
names <- grobs$name[ startsWith(grobs$name,"geom_point")==T]
for (i in unique(names)) {grid.garnish(i,onmouseover=paste("showTooltip(evt, ' ", i, " ' )"),onmouseout="hideTooltip()")}
grid.script(filename="tooltip.js")
grid.export("qplotbrowser.svg")
grid.newpage()
library("ggplot2")
library("gdata")
qplot(disp, mpg, data=mtcars) + facet_wrap(~ cyl)
grobs = grid.ls()
names <- grobs$name[ startsWith(grobs$name,"geom_point")==T]
for (i in unique(names)) {grid.garnish(i,onmouseover=paste("showTooltip(evt, ' ", i, " ' )"),onmouseout="hideTooltip()")}
grid.script(filename="tooltip.js")
grid.export("qplotbrowser.svg")
require(devtools)
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools", dependencies = T)
install.packages("devtools", dependencies = T)
require(devtools)
install_github('rCharts', 'ramnathv')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
library("rCharts")
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
names(iris)
data(iris)
names(iris)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
rPlot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth , data = iris, color = 'Species', type = 'point')
rPlot(SepalLength ~ SepalWidth | Species, data = iris,  type = 'point')
rPlot(SepalLength ~ SepalWidth | Species, data = iris)
rPlot(iris$SepalLength ~ iris$SepalWidth | iris$Species,  type = 'point')
rPlot(iris$SepalLength ~ iris$SepalWidth | iris$Species,  type = 'point', data = iris)
install.packages("manipulate")
source("http://bioconductor.org/biocLite.R")
update.packages(repos=biocinstallRepos(), ask=FALSE, checkBuilt=TRUE)
mapGeneSet <- function(geneSet, geneMap, binaryGeneSet) {
+     probesOfGeneSet <- geneMap[geneMap[, 1] %in% geneSet, 2]
+     binaryGeneSet[probesOfGeneSet] <- 1
+     return(binaryGeneSet)
+ }
mapGeneSet <- function(geneSet, geneMap, binaryGeneSet) {
probesOfGeneSet <- geneMap[geneMap[, 1] %in% geneSet, 2]
binaryGeneSet[probesOfGeneSet] <- 1
return(binaryGeneSet)
}
library("GSEABase")
library("GSEAlm")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocValid()
biocValid(fix=T)
biocValid()
biocLite()
biocLite("source("https://bioconductor.org/biocLite.R")
biocLite()")
biocLite("mgcv")
setwd("..\Dropbox/PhD/Uniquorn_project/Uniquorn/")
setwd("..\Dropbox/PhD/Uniquorn_project/Uniquorn/")
setwd("../Dropbox/PhD/Uniquorn_project/Uniquorn/")
library(devtools)
document()
document()
document()
install_github("RaikOtto/Uniquorn")
devtools::load_all(".")
document()
library(devtools)
document()
library(Uniquorn)
BiocUpgrade()
?BiocUpgrade
biocLite(BiocUpgrade)
biocLite(BiocUpgrade())
biocLite("BiocUpgrade")
biocLite()
packrat::init()
#' Loads VCF-based data into the db
#' @export
parse_vcf_file = function( vcf_file_path  ){
suppressPackageStartupMessages(library("stringr"))
if ( file.exists( vcf_file_path ) ){
print( paste0("Reading VCF file: ", vcf_file_path ) )
vcf_handle = read.table( vcf_file_path, sep ="\t", header = F, comment.char = "#", fill = T )
split_add = function( vcf_matrix_row ){
reference  = as.character( unlist( vcf_matrix_row[4] ) )
length_ref = length( unlist(str_split( reference  ,"") ))
variations = as.character( unlist( str_split( unlist(vcf_matrix_row[5]), "," ) ) )
length_variations = length(unlist(str_split( unlist(vcf_matrix_row[5]), "," )))
chromosome = rep( vcf_matrix_row[1], length(variations)  )
start      = as.integer( rep( vcf_matrix_row[2], length(variations)  ) )
fingerprint = as.character()
for ( i in seq( length_variations ) ){
start_var  = as.character( start[i] )
variation  = variations[i]
length_var = length( unlist(str_split( variation,"") ))
length_alt = max( length_var, length_ref )
end_var    = as.character( as.integer(start_var) + length_alt - 1 )
chrom      = str_replace( str_to_upper( str_trim( as.character( unlist( chromosome[i] ) ) ) ), "CHR", "" )
fingerprint = c( fingerprint, paste0( c( chrom, start_var, end_var), collapse = "_" ) )
}
return( fingerprint )
}
fingerprint  = apply( vcf_handle, FUN = split_add, MARGIN = 1  )
return( fingerprint )
} else {
stop( paste0( "Did not find VCF file: ", vcf_file_path  ) )
}
}
View(parse_vcf_file)
View(parse_vcf_file)
View(parse_vcf_file)
document()
library(devtools)
document()
install_github("RaikOtto/Uniquorn")
install_github("RaikOtto/Uniquorn")
library(Uniquorn)
source("https://bioconductor.org/biocLite.R")
library(Uniquorn)
build()
chek()
check()
library("utils")
source("http://bioconductor.org/biocLite.R")
getwd()
library(Uniquorn)
initiate_canonical_databases(ccle_genotype_file = "../Raw_data/CCLE_hybrid_capture1650_hg19_NoCommonSNPs_CDS_2012.05.07.maf",cosmic_genotype_file = "../Raw_data/CosmicCLP_MutantExport.tsv.gz")
initiate_canonical_databases(ccle_genotype_file = "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/CCLE_hybrid_capture1650_hg19_NoCommonSNPs_CDS_2012.05.07.maf",cosmic_genotype_file = "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/CosmicCLP_MutantExport.tsv.gz")
install_github("RaikOtto")
install_github("RaikOtto/Uniquorn")
initiate_canonical_databases(ccle_genotype_file = "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/CCLE_hybrid_capture1650_hg19_NoCommonSNPs_CDS_2012.05.07.maf",cosmic_genotype_file = "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/CosmicCLP_MutantExport.tsv.gz")
ccle_genotype_file = "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/CCLE_hybrid_capture1650_hg19_NoCommonSNPs_CDS_2012.05.07.maf"
initiate_canonical_databases(ccle_genotype_file = "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/CCLE_hybrid_capture1650_hg19_NoCommonSNPs_CDS_2012.05.07.maf",cosmic_genotype_file = "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/CosmicCLP_MutantExport.tsv")
cosmic_genotype_file = "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/CosmicCLP_MutantExport.tsv"
ref_gen = "GRCH37"
distinct_mode = TRUE
suppressPackageStartupMessages(library("plyr"))
suppressPackageStartupMessages(library("dplyr"))
suppressPackageStartupMessages(library("stringr"))
parse_files = c()
if (file.exists(cosmic_genotype_file)){
print( c( "Found CoSMIC: ", file.exists(cosmic_genotype_file) )  )
parse_files = c(parse_files, cosmic_genotype_file)
}
if (file.exists(ccle_genotype_file)){
print( c( "Found CCLE: ", file.exists( ccle_genotype_file ) )  )
parse_files = c(parse_files, ccle_genotype_file)
}
if (length(parse_files) == 0)
stop("Did not find CCLE & CoSMIC CLP file! Aborting.")
print( c( "Reference genome: ", ref_gen )  )
### pre processing
path_to_python  = paste( system.file("", package="Uniquorn"),"pre_compute_raw_data.py", sep ="/")
package_path    = system.file("", package="Uniquorn")
package_path
path_to_python
database_path
database_path   =  paste( package_path, "uniquorn_distinct_panels_db.sqlite3", sep ="/" )
biocLite("BiocCheck")
cosmic_genotype_tab = read.table(cosmic_genotype_file, sep ="\t", header =T)
cosmic_genotype_tab = read.table(cosmic_genotype_file, sep ="\t", header =T, fill = T)
head(cosmic_genotype_file)
head(cosmic_genotype_tab)
#ct = read.table(cosmic_genotype_file, sep ="\t", header =T, fill = T, colClasses = )
#exclude_cols = c(rep(NULL,4),"")
?read.table
exclude_cols = c(rep("NULL",4),"character")
dim(cosmic_genotype_tab)
exclude_cols = c(rep("NULL",4),"character",rep("NULL",12),"charater","character")
exclude_cols = c(rep("NULL",4),"character",rep("NULL",12),"character","character",rep("NULL",13))
lenth(exclude_cols)
length(exclude_cols)
ct = read.table(cosmic_genotype_file, sep ="\t", header =T, fill = T, colClasses = exclude_cols)
head(ct)
source("Parser_scripts.R")
source(paste( package_path, "Parser_scripts.R", sep = "/"))
ccle_file = "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/CCLE_hybrid_capture1650_hg19_NoCommonSNPs_CDS_2012.05.07.maf"
exclude_cols = c(rep("NULL",3),rep("character", 4),rep("NULL",8),"character",rep("NULL",35))
ccle_genotype_tab = read.table(ccle_genotype_tab, sep ="\t", header =T, fill = T, col.names = exclude_cols)
ccle_genotype_tab = read.table( ccle_file, sep ="\t", header =T, fill = T, col.names = exclude_cols)
head(ccle_genotype_tab)
ccle_genotype_tab = read.table( ccle_file, sep ="\t", header =T, fill = T, colClasses = exclude_cols)
head(ccle_genotype_tab)
?read.csv2
ccle_genotype_tab = read.csv2( ccle_file, sep ="\t", colClasses = exclude_cols)
head(ccle_genotype_tab)
cosmic_genotype_tab = read.csv2( cosmic_file, sep ="\t", colClasses = exclude_cols)
cosmic_file=cosmic_genotype_file
cosmic_genotype_tab = read.csv2( cosmic_file, sep ="\t", colClasses = exclude_cols)
exclude_cols_cosmic = c(rep("NULL",4),"character",rep("NULL",12),"character","character",rep("NULL",13))
exclude_cols_ccle = c(rep("NULL",3),rep("character", 4),rep("NULL",8),"character",rep("NULL",35))
ccle_genotype_tab = read.csv2( ccle_file, sep ="\t", colClasses = exclude_cols_ccle)
exclude_cols_cosmic = c(rep("NULL",4),"character",rep("NULL",12),"character","character",rep("NULL",13))
cosmic_genotype_tab = read.csv2( cosmic_file, sep ="\t", colClasses = exclude_cols_cosmic)
package_path    = system.file("", package="Uniquorn")
database_path   =  paste( package_path, "uniquorn_distinct_panels_db.sqlite3", sep ="/" )
if (!distinct_mode)
database_path   =  paste( package_path, "uniquorn_non_distinct_panels_db.sqlite3", sep ="/" )
database_default_path =  paste( package_path, "uniquorn_db_default.sqlite3", sep ="/" )
sim_list = as.data.frame( tbl( src_sqlite( database_default_path ), "sim_list_df" ), n = -1 )
sim_list = sim_list[, which( colnames(sim_list_default) != "Ref_Gen"  ) ]
sim_list = sim_list[, which( colnames(sim_list_default) != "Weight"  ) ]
database_default_path =  paste( package_path, "uniquorn_db_default.sqlite3", sep ="/" )
database_default_path
sim_list = as.data.frame( tbl( src_sqlite( database_default_path ), "sim_list_df" ), n = -1 )
sim_list = sim_list[, which( colnames(sim_list_default) != "Ref_Gen"  ) ]
sim_list = sim_list[, which( colnames(sim_list) != "Ref_Gen"  ) ]
sim_list = sim_list[, which( colnames(sim_list) != "Weight"  ) ]
new_sim_list = sim_list[0,]
new_sim_list
head()
head(cosmic_genotype_tab)
build_vignettes()
build_vignettes(pkg = "Uniquorn")
?build_vignettes
?build_vignettes
build_vignettes(pkg = "Uniquorn")
build_vignettes()
which("pdflatex")
which(pdflatex)
require("string", quietly = T)
require("stringr", quietly = T)
vec = cosmic_genotype_tab[1,]
vec
vec = cosmic_genotype_tab[1,3]
chrom = split_vec[1]
split_vec = str_split( vec, ":" )
chrom = split_vec[1]
chrom
chroms = sapply( cosmic_genotype_tab[,3], ":" )
chroms = sapply( cosmic_genotype_tab[,3], FUN = str_split, ":" )
dot_split=chroms
head(dot_split)
head(unlist(dot_split))
head(as.matrix(dot_split))
head(as.matrix(unlist(dot_split)))
head(matrix(unlist(dot_split)))
head(matrix(dot_split, ncol=2))
head(as.matrix(dot_split, ncol=2))
head(as.matrix(dot_split, nrow=2))
chroms    = sapply( dot_split, function(vec){return(vec[2])} )
chroms    = sapply( dot_split, function(vec){return(vec[1])} )
head(chroms)
chroms    = as.character( sapply( dot_split, function(vec){return(vec[1])} ) )
head(chroms)
coords    = as.character( sapply( dot_split, function(vec){return(vec[2])} ) )
coord_splits = sapply( coords, FUN = str_split, "-" )
coords    = as.character( sapply( coords, FUN = str_replace, "-", "_" ))
coords = sapply( sim_list[,3], FUN = str_replace_all, ":|-", "_" )
head(cosmic_genotype_tab)
coords = sapply( cosmic_genotype_tab[,3], FUN = str_replace_all, ":|-", "_" )
head(coords)
coords = as.character(coords)
head(coords)
head(cosmic_genotype_tab)
cosmic_file
cosmic_file = "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/GRCH37//CosmicCLP_MutantExport.tsv"
exclude_cols_cosmic = c(rep("NULL",4),"character",rep("NULL",13),"character",rep("NULL",13))
cosmic_genotype_tab = read.csv2( cosmic_file, sep ="\t", colClasses = exclude_cols_cosmic)
head(cosmic_genotype_tab)
new_sim_list = sim_list[0,]
coords = as.character( sapply( cosmic_genotype_tab[,3], FUN = str_replace_all, ":|-", "_" ) )
coords = as.character( sapply( cosmic_genotype_tab[,2], FUN = str_replace_all, ":|-", "_" ) )
cls    = str_replace_all( str_to_upper(cosmic_genotype_tab[,1]), "/|(|])| ", "" )
head(coords)
head(ls)
head(cls)
head(sim_list)
parse_cosmic_genotype_data = function( cosmic_file, sim_list ){
require("stringr", quietly = T)
exclude_cols_cosmic = c(rep("NULL",4),"character",rep("NULL",13),"character",rep("NULL",13))
#cosmic_genotype_file = "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/CosmicCLP_MutantExport.tsv"
cosmic_genotype_tab = read.csv2( cosmic_file, sep ="\t", colClasses = exclude_cols_cosmic)
coords = as.character( sapply( cosmic_genotype_tab[,2], FUN = str_replace_all, ":|-", "_" ) )
cls    = str_replace_all( str_to_upper(cosmic_genotype_tab[,1]), "/|(|])| ", "" )
new_sim_list = data.frame( coords, cls )
colnames(new_sim_list) = colnames(sim_list)
sim_list = rbind( sim_list, new_sim_list )
return(sim_list)
}
sim_list = parse_cosmic_genotype_data( parse_cosmic_genotype_data, sim_list )
sim_list = parse_cosmic_genotype_data( cosmic_genotype_file, sim_list )
cosmic_genotype_file = '/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/GRCH37/CosmicCLP_MutantExport.tsv'
sim_list = parse_cosmic_genotype_data( cosmic_genotype_file, sim_list )
head(sim_list)
ccle_file
ccle_file="/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/GRCH37//CCLE_hybrid_capture1650_hg19_NoCommonSNPs_CDS_2012.05.07.maf"
exclude_cols_ccle = c(rep("NULL",3),rep("character", 4),rep("NULL",8),"character",rep("NULL",35))
ccle_genotype_tab = read.csv2( ccle_file, sep ="\t", colClasses = exclude_cols_ccle)
head(ccle_genotype_tab)
exclude_cols_ccle = c(rep("NULL",4),rep("character", 3),rep("NULL",8),"character",rep("NULL",35))
ccle_genotype_tab = read.csv2( ccle_file, sep ="\t", colClasses = exclude_cols_ccle)
head(ccle_genotype_tab)
coords = as.character( paste0( c( ccle_genotype_tab[,c(1,2,3)] ), collapse = "_" ) )
cls    = sapply( ccle_genotype_tab[,4], FUN = str_split, "_" )
cls    = sapply( cls, FUN = function(vec){ return(vec[1]) })
head(cls)
cls    = as.character( sapply( cls, FUN = function(vec){ return(vec[1]) }) )
head(cls)
new_sim_list = data.frame( coords, cls )
colnames(new_sim_list) = colnames(sim_list)
parse_ccle_genotype_data = function( ccle_file, sim_list ){
require("stringr", quietly = T)
exclude_cols_ccle = c(rep("NULL",4),rep("character", 3),rep("NULL",8),"character",rep("NULL",35))
ccle_genotype_tab = read.csv2( ccle_file, sep ="\t", colClasses = exclude_cols_ccle)
coords = as.character( paste0( c( ccle_genotype_tab[,c(1,2,3)] ), collapse = "_" ) )
cls    = sapply( ccle_genotype_tab[,4], FUN = str_split, "_" )
cls    = as.character( sapply( cls, FUN = function(vec){ return(vec[1]) }) )
new_sim_list = data.frame( coords, cls )
colnames(new_sim_list) = colnames(sim_list)
sim_list = rbind( sim_list, new_sim_list )
return(sim_list)
}
print( c( "Found CCLE: ", file.exists( ccle_genotype_file ) )  )
ccle_genotype_file
ccle_genotype_file =  "/Users/raik_000/Dropbox/PhD/Uniquorn_project//Raw_data/GRCH37/CCLE_hybrid_capture1650_hg19_NoCommonSNPs_CDS_2012.05.07.maf"
print( c( "Found CCLE: ", file.exists( ccle_genotype_file ) )  )
sim_list = parse_ccle_genotype_data( ccle_genotype_file, sim_list )
head(sim_list)
