{
    "contents" : "### parse files\n#' Parses data into r list variable\n#' @export\ninitiate_canonical_databases = function(\n    cosmic_genotype_file = \"CosmicCLP_MutantExport.tsv\",\n    ccle_genotype_file = \"CCLE_hybrid_capture1650_hg19_NoCommonSNPs_CDS_2012.05.07.tsv\",\n    ref_gen = \"GRCH37\",\n    distinct_mode = TRUE\n  ){\n  \n  suppressPackageStartupMessages(library(\"plyr\"))\n  suppressPackageStartupMessages(library(\"dplyr\"))\n  suppressPackageStartupMessages(library(\"stringr\"))\n  \n  print( c( \"Reference genome: \", ref_gen )  )\n  \n  ### pre processing\n  \n  package_path    = system.file(\"\", package=\"Uniquorn\")\n  database_path   =  paste( package_path, \"uniquorn_distinct_panels_db.sqlite3\", sep =\"/\" )\n  \n  if (!distinct_mode)\n    database_path   =  paste( package_path, \"uniquorn_non_distinct_panels_db.sqlite3\", sep =\"/\" )\n  \n  database_default_path =  paste( package_path, \"uniquorn_db_default.sqlite3\", sep =\"/\" )\n  sim_list = as.data.frame( tbl( src_sqlite( database_default_path ), \"sim_list_df\" ), n = -1 )\n  sim_list = sim_list[, which( colnames(sim_list) != \"Ref_Gen\"  ) ]\n  sim_list = sim_list[, which( colnames(sim_list) != \"Weight\"  ) ]\n\n  parse_files = c()\n  \n  if (file.exists(cosmic_genotype_file)){\n      \n      print( c( \"Found CoSMIC: \", file.exists(cosmic_genotype_file) )  )\n      sim_list = parse_cosmic_genotype_data( cosmic_genotype_file, sim_list )\n      parse_files = c(parse_files, cosmic_genotype_file)\n  }\n  \n  if (file.exists(ccle_genotype_file)){\n      \n      print( c( \"Found CCLE: \", file.exists( ccle_genotype_file ) )  )\n      sim_list = parse_ccle_genotype_data( ccle_genotype_file, sim_list )\n      parse_files = c(parse_files, ccle_genotype_file)\n  }\n  \n  if (length(parse_files) == 0)\n      stop(\"Did not find CCLE & CoSMIC CLP file! Aborting.\")\n  \n  # overwrite existing db\n  if (file.exists(database_path))\n    file.remove( database_path )\n\n  # python parser\n\n  print(\"Started pre-calculations\")\n  \n  if ( exists(\"sim_list_stats\"))\n    rm( sim_list_stats )\n  \n  for( parse_file in parse_files ){\n   \n    if (parse_file == cosmic_genotype_file){\n      \n      panel = \"cosmic\"\n    \n    } else if (parse_file == ccle_genotype_file){\n      \n      panel = \"ccle\"\n      \n    }\n    \n    print( paste( \"Parsing: \", panel ), sep =\" \"  )\n    \n    sim_list = sim_list_default\n    sim_list_default      = rbind( sim_list_default, read.table( sim_list_file, sep = \"\\t\", header = T))\n    \n    #file.remove(sim_list_file)\n    #file.remove(sim_list_stats_file)\n  }\n  \n  list_of_cls = unique( sim_list$CL )\n  panels = sapply( list_of_cls, FUN = str_split, \"_\"  )\n  panels = as.character(unique( as.character( sapply( panels, FUN = tail, 1) ) ))\n  \n  print(\"Finished parsing, aggregating over parsed Cancer Cell Line data\")\n  print( paste( \"Distinguishing between panels:\",paste0( c(panels), collapse = \", \"), sep = \" \") )\n  \n  if (!distinct_mode){\n    panels = paste0( c(panels), collapse =\"|\"  )\n    database_path =  paste( package_path, \"uniquorn_non_distinct_panels_db.sqlite3\", sep =\"/\" )\n  }\n  \n  for (panel in panels) {\n  \n    print(panel)\n    \n    sim_list_panel = sim_list_default[ grepl( panel, sim_list_default$CL) , ]\n    member_var_panel = rep( 1, dim(sim_list_panel)[1] )\n    \n    sim_list_stats_panel = aggregate( member_var_panel , by = list( sim_list_panel$CL ), FUN = sum )\n    colnames(sim_list_stats_panel) = c( \"CL\", \"Count\" )\n    \n    print(\"Aggregating over mutational frequency to obtain mutational weight\")\n        \n    weights_panel = aggregate( member_var_panel , by = list( sim_list_panel$Fingerprint ), FUN = sum )\n    weights_panel$x = 1.0 / as.double( weights_panel$x )\n    \n    mapping_panel = match( as.character( sim_list_panel$Fingerprint ), as.character( weights_panel$Group.1) )\n    sim_list_panel = cbind( sim_list_panel, weights_panel$x[mapping_panel] )\n    colnames( sim_list_panel )[3] = \"Weight\"\n    \n    # calculate weights\n    \n    aggregation_all_panel = stats::aggregate( \n      x  = as.double( sim_list_panel$Weight ),\n      by = list( as.character( sim_list_panel$CL ) ),\n      FUN = sum\n    )\n    \n    mapping_agg_stats_panel = which( aggregation_all_panel$Group.1 %in% sim_list_stats_panel[,1], arr.ind = T  )\n  sim_list_stats_panel = cbind( sim_list_stats_panel, aggregation_all_panel$x[mapping_agg_stats_panel] )\n    \n    #print(\"Finished aggregating, writing to database\")\n    \n    Ref_Gen = rep(ref_gen, dim(sim_list_panel)[1]  )\n    sim_list_panel = cbind( sim_list_panel, Ref_Gen )\n    Ref_Gen = rep( ref_gen, dim(sim_list_stats_panel)[1]  )\n    sim_list_stats_panel = cbind( sim_list_stats_panel, Ref_Gen )\n    colnames( sim_list_stats_panel ) = c( \"CL\",\"Count\",\"All_weights\",\"Ref_Gen\" )\n    \n    if(! exists(\"sim_list_global\"))\n      sim_list_global <<- sim_list_default[0,]\n    \n    sim_list_global = rbind(sim_list_global,sim_list_panel)\n    \n    if(! exists(\"sim_list_stats_global\"))\n      sim_list_stats_global <<- sim_list_stats_panel[0,]\n    \n    sim_list_stats_global = rbind( sim_list_stats_global, sim_list_stats_panel  )\n  }\n  \n  uni_db            = src_sqlite( database_path, create = T )\n  sim_list_df       = tbl_df( sim_list_global )\n  sim_list_stats_df = tbl_df( sim_list_stats_global )\n  \n  copy_to( uni_db, sim_list_df, temporary = F, \n    indexes = list(\n      \"Fingerprint\",\n      \"CL\",\n      \"Weight\",\n      \"Ref_Gen\"\n    )\n  )\n  \n  copy_to( uni_db, sim_list_stats_df, temporary = F,\n    indexes = list(\n      \"CL\",\n      \"Count\",\n      \"All_weights\",\n      \"Ref_Gen\"\n    )\n  )\n  \n  print (\"Initialization of Uniquorn DB finished\")\n}",
    "created" : 1452609689102.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1877810847",
    "id" : "E9708F8B",
    "lastKnownWriteTime" : 1452610158,
    "path" : "C:/Users/raik_000/Dropbox/PhD/Uniquorn_project/Uniquorn/R/Parse_raw_data.R",
    "project_path" : "R/Parse_raw_data.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}